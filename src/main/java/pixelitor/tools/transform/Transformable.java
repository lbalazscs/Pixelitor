/*
 * Copyright 2025 Laszlo Balazs-Csiki and Contributors
 *
 * This file is part of Pixelitor. Pixelitor is free software: you
 * can redistribute it and/or modify it under the terms of the GNU
 * General Public License, version 3 as published by the Free
 * Software Foundation.
 *
 * Pixelitor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Pixelitor. If not, see <http://www.gnu.org/licenses/>.
 */

package pixelitor.tools.transform;

import pixelitor.gui.View;
import pixelitor.history.PixelitorEdit;
import pixelitor.utils.debug.Debuggable;

import java.awt.geom.AffineTransform;

/**
 * Represents an object that can be transformed interactively, using an
 * {@link AffineTransform} generated by a {@link TransformBox}.
 * <p>
 * This interface defines a stateful "transformation session" lifecycle.
 * A typical session proceeds as follows:
 * <ol>
 *   <li><b>{@link #prepareForTransform()}</b>: Called once at the beginning of the
 *       session to back up the object's original state.</li>
 *   <li><b>{@link #imTransform(AffineTransform)}</b>: Called repeatedly during
 *       the session (e.g., while a user drags a handle) to provide a live preview
 *       of the transformation.</li>
 *   <li>The session concludes with one of two methods:
 *     <ul>
 *       <li><b>{@link #finalizeTransform()}</b>: Called to "commit" the changes,
 *           making them permanent and returning a single undo/redo entry for the
 *           entire session.</li>
 *       <li><b>{@link #cancelTransform()}</b>: Called to "abort" the session,
 *           discarding all changes and restoring the object to its original state.</li>
 *     </ul>
 *   </li>
 * </ol>
 */
public interface Transformable extends Debuggable {

    /**
     * Prepares the object for a new transformation session.
     * <p>
     * This method should be called exactly once when a transformation operation
     * begins (e.g., when a {@code TransformBox} is created for this object).
     * Its primary responsibility is to save a backup of the object's current,
     * pristine state. This backed-up state serves as the single source of truth
     * for all subsequent {@link #imTransform} calls and is required by
     * {@link #cancelTransform} and for creating the "before" state of an undo edit
     * in {@link #finalizeTransform}.
     */
    void prepareForTransform();

    /**
     * Applies the given transform in image space to provide a live preview.
     * <p>
     * This method is called repeatedly during an active transformation session to
     * update the object's visual representation. To prevent cumulative errors and
     * ensure correctness, the implementation must apply the given {@code transform}
     * to the original state that was saved during the call to
     * {@link #prepareForTransform()}, not to the result of the previous call.
     *
     * @param transform The complete transformation from the original state to the
     *                  current preview state.
     */
    void imTransform(AffineTransform transform);

    /**
     * Finalizes the transformation session, committing the changes and returning an
     * edit for the history stack.
     * <p>
     * This method is called when the user confirms the transformation (e.g., by
     * pressing Enter, double-clicking, or switching to another tool).
     * The implementation should:
     * <ol>
     *   <li>Make the object's current transformed state permanent.</li>
     *   <li>Create a single, self-contained {@link PixelitorEdit} that represents
     *       the entire session (from the original state to this final state).</li>
     *   <li>Release any resources associated with the session, such as the backup
     *       of the original state.</li>
     * </ol>
     * The caller is responsible for adding the returned edit to the global history.
     *
     * @return A {@code PixelitorEdit} object for undo/redo, or {@code null} if
     *         the transformation resulted in no net change.
     */
    PixelitorEdit finalizeTransform();

    /**
     * Cancels the transformation session, discarding all changes.
     * <p>
     * This method is called when the user aborts the transformation (e.g., by
     * pressing the Escape key). The implementation should discard the current
     * in-progress transformation and restore the object to the pristine state that
     * was saved during the call to {@link #prepareForTransform()}.
     * <p>
     * This action should <b>not</b> create an entry in the undo/redo history.
     * After restoring the state, it should release any session-specific resources.
     */
    void cancelTransform();

    /**
     * Updates the user interface to reflect the current state of the object.
     * This may involve more than a simple repaint, such as recalculating a cached image.
     *
     * @param view The view component that is displaying this object.
     */
    void updateUI(View view);
}
